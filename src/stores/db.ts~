import { initializeApp } from "firebase/app"
import {
  createUserWithEmailAndPassword,
  getAuth,
  GoogleAuthProvider,
  onAuthStateChanged,
  signInWithEmailAndPassword,
  signInWithPopup,
  signOut,
  User,
} from "firebase/auth"
import { defineStore } from "pinia"
import { ref, computed } from "vue"
import { useRouter } from "vue-router"

export const useUserStore = defineStore("userStore", () => {
  const auth = getAuth()
  const router = useRouter()

  const user = ref<User | null>(null)

  function initAuthState() {
    initializeApp({
      apiKey: "AIzaSyCFY4gcTMcHEcGjVMHkkJDW5rjviRIMT8c",
      authDomain: "vue-chat-7135d.firebaseapp.com",
      projectId: "vue-chat-7135d",
      storageBucket: "vue-chat-7135d.firebasestorage.app",
      messagingSenderId: "107276856054",
      appId: "1:107276856054:web:763d0d2a942f108bb09ad7",
    })

    const storedUser = localStorage.getItem("user")
    if (storedUser) {
      user.value = JSON.parse(storedUser)
    }

    onAuthStateChanged(auth, (firebaseUser) => {
      if (firebaseUser) {
        user.value = firebaseUser
        localStorage.setItem("user", JSON.stringify(firebaseUser))
      } else {
        user.value = null
        localStorage.removeItem("user")
      }
    })
  }

  const getCurrentUser = computed(() => user.value)

  async function withErrorHandling<T>(callback: () => Promise<T>): Promise<T | undefined> {
    try {
      return await callback()
    } catch (e: unknown) {
      if (e instanceof Error) {
        console.error(e)
        alert(e.message)
      } else {
        console.error("Unexpected error", e)
      }
    }
  }

  const logOut = () =>
    withErrorHandling(async () => {
      await signOut(auth)
      await router.push("/login")
    })

  const loginGoogle = () =>
    withErrorHandling(async () => {
      await signInWithPopup(auth, new GoogleAuthProvider())
      await router.push("/chat")
    })

  const login = (values: { email: string; password: string }) =>
    withErrorHandling(async () => {
      await signInWithEmailAndPassword(auth, values.email, values.password)
      await router.push("/")
    })

  const register = (values: { email: string; password: string }) =>
    withErrorHandling(async () => {
      await createUserWithEmailAndPassword(auth, values.email, values.password)
      await router.push("/chat")
    })
  
  return {
    user,
    getCurrentUser,
    logOut,
    login,
    loginGoogle,
    register,
    initAuthState,
  }
})
